c<-table(a,b)
d<-as.data.frame(c)
e<-subset(d, d$Freq>0)
f<-t(e$a)
g<-t(e$b)
#Adding Legend
legend(x=range(co[,1])[2], y=range(co[,2])[2],
legend=as.character(f),
pch=21,
col = "#777777",
pt.bg=as.character(g),
pt.cex=4,
bty="n",
ncol=1,
lty=1,
cex = .8)
#Adding Title
title("Network Smaller Than Median Degree - fuull_no_zero_fancy", sub = "Source: from authors ")
text(x=range(co[,1])[1], y=range(co[,2])[1], labels =
sprintf("Mean In Degree: %.2f\nMean Out Degree: %.2f",
mean(degree(small_full_no_zero, mode="in")),
mean(degree(small_full_no_zero, mode="out"))
)
)
#Set Seed
set.seed(123)
# Network elements with lower than meadian degree
lowerthanmedian.network_full_no_zero<-V(full_no_zero)[degree(full_no_zero)>median(degree(full_no_zero))]
#Deleting vertices based in intersection betewenn full_no_zero
small_full_no_zero<-delete.vertices(full_no_zero, lowerthanmedian.network_full_no_zero)
#Plotting based only on degree measures
edge.start <- ends(small_full_no_zero, es=E(small_full_no_zero), names=F)[,1]
# Fixing ego
minC <- rep(-Inf, vcount(small_full_no_zero))
maxC <- rep(Inf, vcount(small_full_no_zero))
minC[1] <- maxC[1] <- 0
co <- layout_with_fr(small_full_no_zero, niter=10000, minx=minC, maxx=maxC,miny=minC, maxy=maxC, weights = E(small_full_no_zero)$weight)
#Plotting
#PLotting
plot(small_full_no_zero,
layout=co,
edge.color=V(small_full_no_zero)$color[edge.start],
edge.arrow.size=(degree(small_full_no_zero)+1)/1000,
edge.width=E(small_full_no_zero)$weight/10,
edge.curved = TRUE,
vertex.size=log((V(small_full_no_zero)$full_no_zero_centr_degree+2))*20,
vertex.size=20,
vertex.frame.color="#ffffff",
vertex.label.color="black",
vertex.label=get.vertex.attribute(small_full_no_zero,"LABEL_COR"),
vertex.label.cex=log((degree(small_full_no_zero)+2)),
vertex.label.dist=0,
rescale=F,
xlim=range(co[,1]),
ylim=range(co[,2]))
axis(1)
axis(2)
#Solving Problems with legend rendering
a<-V(small_full_no_zero)$LABEL_COR
b<-V(small_full_no_zero)$color
c<-table(a,b)
d<-as.data.frame(c)
e<-subset(d, d$Freq>0)
f<-t(e$a)
g<-t(e$b)
#Adding Legend
legend(x=range(co[,1])[2], y=range(co[,2])[2],
legend=as.character(f),
pch=21,
col = "#777777",
pt.bg=as.character(g),
pt.cex=4,
bty="n",
ncol=1,
lty=1,
cex = .8)
#Adding Title
title("Network Smaller Than Median Degree - fuull_no_zero_fancy", sub = "Source: from authors ")
text(x=range(co[,1])[1], y=range(co[,2])[1], labels =
sprintf("Mean In Degree: %.2f\nMean Out Degree: %.2f",
mean(degree(small_full_no_zero, mode="in")),
mean(degree(small_full_no_zero, mode="out"))
)
)
#Set Seed
set.seed(123)
# Network elements with lower than meadian degree
lowerthanmedian.network_full_no_zero<-V(full_no_zero)[degree(full_no_zero)>median(degree(full_no_zero))]
#Deleting vertices based in intersection betewenn full_no_zero
small_full_no_zero<-delete.vertices(full_no_zero, lowerthanmedian.network_full_no_zero)
#Plotting based only on degree measures
edge.start <- ends(small_full_no_zero, es=E(small_full_no_zero), names=F)[,1]
# Fixing ego
minC <- rep(-Inf, vcount(small_full_no_zero))
maxC <- rep(Inf, vcount(small_full_no_zero))
minC[1] <- maxC[1] <- 0
co <- layout_with_fr(small_full_no_zero, niter=10000, minx=minC, maxx=maxC,miny=minC, maxy=maxC, weights = E(small_full_no_zero)$weight)
#Plotting
#PLotting
plot(small_full_no_zero,
layout=co,
edge.color=V(small_full_no_zero)$color[edge.start],
edge.arrow.size=(degree(small_full_no_zero)+1)/1000,
edge.width=E(small_full_no_zero)$weight/10,
edge.curved = TRUE,
vertex.size=log((V(small_full_no_zero)$full_no_zero_centr_degree+2))*20,
vertex.size=20,
vertex.frame.color="#ffffff",
vertex.label.color="black",
vertex.label=get.vertex.attribute(small_full_no_zero,"LABEL_COR"),
vertex.label.cex=log((degree(small_full_no_zero)+2))/2,
vertex.label.dist=0,
rescale=F,
xlim=range(co[,1]),
ylim=range(co[,2]))
axis(1)
axis(2)
#Solving Problems with legend rendering
a<-V(small_full_no_zero)$LABEL_COR
b<-V(small_full_no_zero)$color
c<-table(a,b)
d<-as.data.frame(c)
e<-subset(d, d$Freq>0)
f<-t(e$a)
g<-t(e$b)
#Adding Legend
legend(x=range(co[,1])[2], y=range(co[,2])[2],
legend=as.character(f),
pch=21,
col = "#777777",
pt.bg=as.character(g),
pt.cex=4,
bty="n",
ncol=1,
lty=1,
cex = .8)
#Adding Title
title("Network Smaller Than Median Degree - fuull_no_zero_fancy", sub = "Source: from authors ")
text(x=range(co[,1])[1], y=range(co[,2])[1], labels =
sprintf("Mean In Degree: %.2f\nMean Out Degree: %.2f",
mean(degree(small_full_no_zero, mode="in")),
mean(degree(small_full_no_zero, mode="out"))
)
)
vcount(small_full_no_zero)
minC <- rep(-Inf, vcount(small_full_no_zero))
minC
#Set Seed
set.seed(124)
# Network elements with lower than meadian degree
higherthanmedian.network_full_no_zero<-V(full_no_zero)[degree(full_no_zero)<median(degree(full_no_zero))]
#Deleting vertices based in intersection betewenn full_no_zero
high_full_no_zero<-delete.vertices(full_no_zero, higherthanmedian.network_full_no_zero)
#Plotting based only on degree measures
edge.start <- ends(high_full_no_zero, es=E(high_full_no_zero), names=F)[,1]
# Fixing ego
minC <- rep(-Inf, vcount(high_full_no_zero))
maxC <- rep(Inf, vcount(high_full_no_zero))
minC[1] <- maxC[1] <- 0
co <- layout_with_fr(high_full_no_zero, niter=10000, minx=minC, maxx=maxC,miny=minC, maxy=maxC, weights = E(high_full_no_zero)$weight)
#PLotting
plot(high_full_no_zero,
layout=co,
edge.color=V(high_full_no_zero)$color[edge.start],
edge.arrow.size=(degree(high_full_no_zero)+1)/1000,
edge.width=E(high_full_no_zero)$weight/10,
edge.curved = TRUE,
vertex.size=log((V(high_full_no_zero)$full_no_zero_centr_degree+2))*10,
vertex.frame.color="#ffffff",
vertex.label.color="black",
vertex.label=get.vertex.attribute(high_full_no_zero,"LABEL_COR"),
vertex.label.cex=log((degree(high_full_no_zero)+2))/10,
vertex.label.dist=0,
rescale=F,
xlim=range(co[,1]),
ylim=range(co[,2]))
axis(1)
axis(2)
#Solving Problems with legend rendering
a<-V(high_full_no_zero)$LABEL_COR
b<-V(high_full_no_zero)$color
c<-table(a,b)
d<-as.data.frame(c)
e<-subset(d, d$Freq>0)
f<-t(e$a)
g<-t(e$b)
#Adding Legend
legend(x=range(co[,1])[2], y=range(co[,2])[2],
legend=as.character(f),
pch=21,
col = "#777777",
pt.bg=as.character(g),
pt.cex=4,
bty="n",
ncol=1,
lty=1,
cex = .8)
#Adding Title
title("Network Higher Than Median Degree - fuull_no_zero_fancy", sub = "Source: from authors ")
text(x=range(co[,1])[1], y=range(co[,2])[1], labels =
sprintf("Median In Degree: %.2f\n Median Out Degree: %.2f",
median(degree(high_full_no_zero, mode="in")),
median(degree(high_full_no_zero, mode="out"))
)
)
#Set Seed
set.seed(123)
# Network elements with lower than meadian degree
lowerthanmedian.network_full_no_zero<-V(full_no_zero)[degree(full_no_zero)>median(degree(full_no_zero))]
#Deleting vertices based in intersection betewenn full_no_zero
small_full_no_zero<-delete.vertices(full_no_zero, lowerthanmedian.network_full_no_zero)
#Plotting based only on degree measures
edge.start <- ends(small_full_no_zero, es=E(small_full_no_zero), names=F)[,1]
# Fixing ego
minC <- rep(-Inf, vcount(small_full_no_zero))
maxC <- rep(Inf, vcount(small_full_no_zero))
minC[1] <- maxC[1] <- 0
co <- layout_with_fr(small_full_no_zero, niter=10000, minx=minC, maxx=maxC,miny=minC, maxy=maxC, weights = E(small_full_no_zero)$weight)
#PLotting
plot(small_full_no_zero,
layout=co,
edge.color=V(small_full_no_zero)$color[edge.start],
edge.arrow.size=(degree(small_full_no_zero)+1)/1000,
edge.width=E(small_full_no_zero)$weight/10,
edge.curved = TRUE,
vertex.size=log((V(small_full_no_zero)$full_no_zero_centr_degree+2))*20,
vertex.frame.color="#ffffff",
vertex.label.color="black",
vertex.label=get.vertex.attribute(small_full_no_zero,"LABEL_COR"),
vertex.label.cex=log((degree(small_full_no_zero)+2))/2,
vertex.label.dist=0,
rescale=F,
xlim=range(co[,1]),
ylim=range(co[,2]))
axis(1)
axis(2)
#Solving Problems with legend rendering
a<-V(small_full_no_zero)$LABEL_COR
b<-V(small_full_no_zero)$color
c<-table(a,b)
d<-as.data.frame(c)
e<-subset(d, d$Freq>0)
f<-t(e$a)
g<-t(e$b)
#Adding Legend
legend(x=range(co[,1])[2], y=range(co[,2])[2],
legend=as.character(f),
pch=21,
col = "#777777",
pt.bg=as.character(g),
pt.cex=4,
bty="n",
ncol=1,
lty=1,
cex = .8)
#Adding Title
title("Network Smaller Than Median Degree - fuull_no_zero_fancy", sub = "Source: from authors ")
text(x=range(co[,1])[1], y=range(co[,2])[1], labels =
sprintf("Mean In Degree: %.2f\nMean Out Degree: %.2f",
mean(degree(small_full_no_zero, mode="in")),
mean(degree(small_full_no_zero, mode="out"))
)
)
minC <- rep(-Inf, vcount(small_full_no_zero))
maxC <- rep(Inf, vcount(small_full_no_zero))
minC[1] <- maxC[1] <- 0
minC
V(small_full_no_zero)
degree(small_full_no_zero)
#Plotting based only on degree measures  #full_no_zero_a.nn.deg_w
full_no_zero_a.nn.deg<-as.numeric(graph.knn(full_no_zero)$knn)
full_no_zero_a.nn.deg[full_no_zero_a.nn.deg=="NaN"]<-0
plot(full_no_zero,
layout=layout.kamada.kawai(full_no_zero),
vertex.label=get.vertex.attribute(full_no_zero,"LABEL_COR"),
vertex.size=(full_no_zero_a.nn.deg+1)/10,
vertex.label.color="black",
vertex.frame.color="#ffffff",
edge.arrow.size=0.1,
vertex.label.cex=(full_no_zero_a.nn.deg+1)/300,
edge.width=(edge.betweenness(full_no_zero, weights =E(full_no_zero)$weight))/500,
edge.curved = TRUE
)
#Solving Problems with legend rendering
a<-V(full_no_zero)$LABEL_COR
b<-V(full_no_zero)$color
c<-table(a,b)
d<-as.data.frame(c)
e<-subset(d, d$Freq>0)
f<-t(e$a)
g<-t(e$b)
#Adding Legend
legend(x=10, y=5,
legend=as.character(f),
pch=21,
col = "#777777",
pt.bg=as.character(g),
pt.cex=4,
bty="n",
ncol=1,
lty=1,
cex = .8)
#Adding Title
title("Network Average Neighbor Degree Sized - fuull_no_zero_fancy", sub = "Source: from authors ")
text(x = -1, y = -1.2, labels =
sprintf("Median Average Neighbor Degree: %.2f",
median((full_no_zero_a.nn.deg+1))
))
full_no_zero_a.nn.deg<-as.numeric(graph.knn(full_no_zero)$knn)
full_no_zero_a.nn.deg[full_no_zero_a.nn.deg=="NaN"]<-0
#Set Seed
set.seed(124)
#Plotting based only on degree measures
edge.start <- ends(full_no_zero, es=E(full_no_zero), names=F)[,1]
# Fixing ego
minC <- rep(-Inf, vcount(high_full_no_zero))
maxC <- rep(Inf, vcount(high_full_no_zero))
minC[1] <- maxC[1] <- 0
co <- layout_with_fr(full_no_zero, niter=10000, minx=minC, maxx=maxC,miny=minC, maxy=maxC, weights = E(full_no_zero)$weight)
#Plotting based only on degree measures  #full_no_zero_a.nn.deg_w
full_no_zero_a.nn.deg<-as.numeric(graph.knn(full_no_zero)$knn)
full_no_zero_a.nn.deg[full_no_zero_a.nn.deg=="NaN"]<-0
#PLotting
plot(high_full_no_zero,
layout=co,
edge.color=V(high_full_no_zero)$color[edge.start],
edge.arrow.size=(degree(high_full_no_zero)+1)/1000,
edge.width=E(high_full_no_zero)$weight/10,
edge.curved = TRUE,
vertex.size=(full_no_zero_a.nn.deg+1)/10,
vertex.size=20,
vertex.frame.color="#ffffff",
vertex.label.color="black",
vertex.label=get.vertex.attribute(high_full_no_zero,"LABEL_COR"),
vertex.label.cex=(full_no_zero_a.nn.deg+1)/300,
vertex.label.dist=0,
rescale=F,
xlim=range(co[,1]),
ylim=range(co[,2]))
axis(1)
axis(2)
#Set Seed
set.seed(124)
#Plotting based only on degree measures
edge.start <- ends(full_no_zero, es=E(full_no_zero), names=F)[,1]
# Fixing ego
minC <- rep(-Inf, vcount(full_no_zero))
maxC <- rep(Inf, vcount(full_no_zero))
minC[1] <- maxC[1] <- 0
co <- layout_with_fr(full_no_zero, niter=10000, minx=minC, maxx=maxC,miny=minC, maxy=maxC, weights = E(full_no_zero)$weight)
#Plotting based only on degree measures  #full_no_zero_a.nn.deg_w
full_no_zero_a.nn.deg<-as.numeric(graph.knn(full_no_zero)$knn)
full_no_zero_a.nn.deg[full_no_zero_a.nn.deg=="NaN"]<-0
#PLotting
plot(high_full_no_zero,
layout=co,
edge.color=V(full_no_zero)$color[edge.start],
edge.arrow.size=full_no_zero_a.nn.deg/1000,
edge.width=E(full_no_zero)$weight/10,
edge.curved = TRUE,
vertex.size=(full_no_zero_a.nn.deg+1)/10,
vertex.size=20,
vertex.frame.color="#ffffff",
vertex.label.color="black",
vertex.label=get.vertex.attribute(full_no_zero,"LABEL_COR"),
vertex.label.cex=(full_no_zero_a.nn.deg+1)/300,
vertex.label.dist=0,
rescale=F,
xlim=range(co[,1]),
ylim=range(co[,2]))
axis(1)
axis(2)
full_no_zero_a.nn.deg
full_no_zero<-g
dd <- degree(g)
full_no_zero=g
dd <- degree(g)
dd <- degree(full_no_zero)
rm(list = ls()) # removing previous objects to be sure that we don't have objects conflicts name
load("~/SNArRDJF/Robject/1_intro_full_no_zero.RData")
full_no_zero<-var14
full_no_zero<-simplify(full_no_zero) #Simplify
g=4
g
g=full_no_zero
dd <- degree(full_no_zero)
print("The mean degree is, ")
print(mean(dd))
#degree distribution
dd2 <- degree.distribution(g)
#dd2 is calculated for a node degree ranging from 0 to the max degree found in the network, hence I
#define the following
k_range <- 0:(length(dd2)-1)
#Get also the cumulative distribution
dd2_cum <- degree.distribution(g, cumulative=TRUE)
#From now on, I get some warnings in the log-log plots, but it should not be anything to worry about
pdf("frequency_degree2.pdf")
par( mar = c(4.5,5, 2, 1) + 0.1)
plot(k_range,dd2, xlab="Degree",
ylab="Frequency", pch=3, col=3, type="b",cex.axis=1.4,cex.lab=1.6)
dev.off()
pdf("frequency_degree2-loglog.pdf")
par( mar = c(4.5,5, 2, 1) + 0.1)
plot(k_range,dd2, xlab="Degree",
ylab="Frequency",log="xy", pch=3, col=3, type="b", ylim=c(2e-3,3e-1), yaxt="n",cex.axis=1.4,cex.lab=1.6)
axis(side=2, at=c( 2e-3, 3e-2, 3e-1),
labels=expression(2%*%10^3,3%*%10^2,3%*%10^1 ),cex.lab=1.4,cex.axis=1.6)
dev.off()
pdf("frequency_degree2-cumulative-loglog.pdf")
pdf("frequency_degree2-cumulative-loglog.pdf")
par( mar = c(4.5,5, 2, 1) + 0.1)
plot(0:(length(dd2)-1),dd2_cum, xlab="Degree",
ylab="Cumulative frequency",log="xy", pch=3, col=3, type="b",cex.axis=1.4,cex.lab=1.6)
dev.off()
pdf("frequency_degree2-cumulative.pdf")
par( mar = c(4.5,5, 2, 1) + 0.1)
plot(0:(length(dd2)-1),dd2_cum, xlab="Degree",
ylab="Cumulative frequency", pch=3, col=3, type="b",cex.axis=1.4,cex.lab=1.6)
dev.off()
#Now I fit the degree distribution to a power law, but I get an error if I try to set xmin. Why????
pfit <- power.law.fit(dd)
pdf("frequency_degree2-loglog-and-fit.pdf")
par( mar = c(4.5,5, 2, 1) + 0.1)
plot(k_range,dd2, xlab="Degree",
ylab="Frequency",log="xy", ylim=c(0.002,0.5), pch=3, col=3, type="b",cex.axis=1.4,cex.lab=1.6, yaxt="n")
axis(side=2, at=c( 2e-3, 3e-2, 3e-1),
labels=expression(2%*%10^3,3%*%10^2,3%*%10^1 ),cex.lab=1.4,cex.axis=1.6)
lines(2:20,1*(2:20)^(-coef(pfit)) )
dev.off()
#Now calculate graph diameter
d <- get.diameter(g)
E(g, path=d)$color <- "red"
E(g, path=d)$width <- 1
V(g)[ d ]$label.color <- "black"
V(g)[ d ]$color <- "red"
pdf("airport_graph_diameter.pdf")
plot(g, layout=layout.fruchterman.reingold,
vertex.label.dist=0.5,vertex.label=NA, vertex.size=5)
title(main="Diameter of the random graph",
xlab="created by igraph 0.5")
axis(1, labels=FALSE, tick=TRUE)
axis(2, labels=FALSE, tick=TRUE)
dev.off()
#Now calculate the vertex betweenness
#and find the node with the highest betweenness
ver_bet <- betweenness(g)
## max_bet <- ver_bet[which(ver_bet==max(ver_bet))]
## print("The maximumum value of the betweenness is, ")
## print (max_bet)
## node_max_bet <- which(ver_bet==max(ver_bet))-1 #consistent with the labelling of vertices starting from 0 and not from 1
## print("The node with the maximumum value of the betweenness is, ")
## print (node_max_bet)
print("The mean vertex betweenness is, ")
print(mean(ver_bet))
#Now calculate the clustering coefficients (also called transitivity of a graph)
clust <- transitivity(g, type="local")
#Now there is a problem: the definition of clustering coefficient may lead to a 0/0 # which becomes a NaN for R. The idea is then to remove this NaN and set them all to zero (as they should)
bad <- sapply(clust, function(x) all(is.nan(x)))
clust[bad] <- 0 #done!
print("The mean clustering coefficient is, ")
print(mean(clust))
#Now I can plot the clustering coefficients as a function of the node degrees
#The following figure looks awful, am I doing anything wrong?
pdf("clustering-vs-degree.pdf")
par( mar = c(4.5,5, 2, 1) + 0.1)
plot(dd,clust, xlab="Degree",
ylab="Clustering coefficient", pch=4, col="blue", type="p",cex.axis=1.4,cex.lab=1.6)
dev.off()
# calculate average nearest-neighbour degree
knn <- graph.knn(g)
#knn$knnk lists the average nearest neighbour degree for vertices having at least one neighbour, hence
# the vector is one element shorter than dd2
pdf("nearest-neighbour-frequency.pdf")
par( mar = c(4.5,5, 2, 1) + 0.1)
plot(knn$knnk, xlab="Degree",
ylab="Frequency", pch=3, col=3, type="b",cex.axis=1.4,cex.lab=1.6)
dev.off()
pdf("nearest-neighbour-frequency-log-log.pdf")
par( mar = c(4.5,5, 2, 1) + 0.1)
plot(knn$knnk, xlab="Degree",
ylab="Frequency", pch=3, col=3,log="xy", type="b",cex.axis=1.4,cex.lab=1.6)
dev.off()
#Now get the shortest paths in the network
mean_shortest_path <- average.path.length(g)
print("The mean shortest path is, ")
print(mean_shortest_path)
h_list <- path.length.hist(g)
print ("So far so good")
x <- matrix(runif(12000000),ncol=120)
G1 <- nng(x,k=10, mutual=T)
install.packages("cccd")
G1 <- nng(full_no_zero,k=10, mutual=T)
require(cccd)
G1 <- nng(full_no_zero,k=10, mutual=T)
x<-get.adjacency(full_no_zero, type=c("both", "upper", "lower"),
attr=NULL, names=TRUE, binary=FALSE, sparse=FALSE)
x<-get.adjacency(full_no_zero, "both", attr=NULL, names=TRUE, binary=FALSE, sparse=FALSE)
x<-get.adjacency(full_no_zero, "both", attr=NULL, names=TRUE, sparse=FALSE)
y<-get.edgelist(full_no_zero, names=TRUE)
G1 <- nng(x,k=10, mutual=T)
plot(G1, layout= layout.kamada.kawai,vertex.color="green") # I like Japanese !!!
y<-get.edgelist(full_no_zero, names=TRUE)
G1 <- nng(y,k=10, mutual=T)
y<-get.edgelist(full_no_zero, names=TRUE)
G1 <- nng(y,k=10, mutual=T)
g1
G1
V(G1)
V(G1)$
k
View(x)
y
